建立仓库：
首先，选择一个合适的地方
第二步，通过git init命令把这个目录变成Git可以管理的仓库：
$ git init


把一个文件放到Git仓库：
第一步，用命令git add告诉Git，把文件添加到仓库：
$ git add readme.txt
第二步，用命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "wrote a readme file"
(-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。)


git status命令可以让我们时刻掌握仓库当前的状态，要随时掌握工作区的状态，使用git status命令。
$ git status


git diff顾名思义就是查看difference
$ git diff readme.txt 


Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本,上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。要把当前版本回退到上一个版本，就可以使用git reset命令：
$ git reset --hard HEAD^
指定回到未来的某个版本:
$ git reset --hard 3628164


穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
$ git log


git reflog用来记录你的每一次命令
$ git reflog


命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
$ git checkout -- readme.txt


用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
$ git reset HEAD readme.txt
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：
$ rm test.txt
确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
$ git rm test.txt
删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
$ git checkout -- test.txt


在本地的learngit仓库下运行命令，把本地仓库的内容推送到GitHub仓库：
$ git remote add origin git@github.com:linxuedong/learngit.git

把本地库的所有内容推送到远程库上：
$ git push -u origin master （第一次推送master分支）
$ git push origin master


用命令git clone克隆远程库到本地库：
$ git clone git@github.com:linxuedong/gitskills.git


创建dev分支，然后切换到dev分支：
$ git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev


用git branch命令查看当前分支：
$ git branch


切换回master分支：
$ git checkout master
dev分支的工作完成，我们就可以切换回master分支：
$ git checkout master


把dev分支的工作成果合并到master分支上：
$ git merge dev


删除dev分支了：
$ git branch -d dev qita


通常，合并分支时，如果可能，Git会用Fast forward模式
